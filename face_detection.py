# -*- coding: utf-8 -*-
"""Face Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AWMRg6k0v5kjI3BZi8cJB711B6xbowUT
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from matplotlib import pyplot as plt
# %matplotlib inline
import pandas as pd
import requests as rq
from bs4 import BeautifulSoup as bs
!pip install google-search-results
from serpapi import GoogleSearch
!pip install networkx
import networkx as nt
!pip install opencv-python
import cv2
import networkx
!apt update
!apt install -y cmake
!pip install dlib
import dlib
!wget   http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2
!bunzip2 /content/shape_predictor_68_face_landmarks.dat.bz2

params = {
    'q': 'frontal face closeup and sharp',
    "hl":"en",
    "tbm":"isch",
    'engine': 'google',
    'api_key':"32c55d0aa4f94b3d91e1fc1626a469489097a8c31671f40afb8fd8488879c9f7",
}
search =GoogleSearch(params)
results = search.get_dict()
results

res = results["images_results"]
res

urls = []
number_of_image=int(input("enter number of image:"))
for i in range(1,number_of_image,2):
    url = res[i]['original']
    urls.append(url)
urls

for i in range(len(urls)):
    response = rq.get(urls[i])
    print(response)
    with open(f'image{i+1}.jpg', 'wb') as handler:
      handler.write(response.content)
      print(f"image {i+1} downloaded")

for i in range(len(urls)):
  images=cv2.imread(f"image{i+1}.jpg")
  images_to_rgp=cv2.cvtColor(images,cv2.COLOR_BGR2RGB)
  plt.subplot(1,number_of_image,i+1)
  plt.imshow(images_to_rgp)

counter_of_faces=0
for i in range(len(urls)):
  images=cv2.imread(f"image{i+1}.jpg")
  images_to_rgp=cv2.cvtColor(images,cv2.COLOR_BGR2RGB)
  detector=dlib.get_frontal_face_detector()
  predictor=dlib.shape_predictor("shape_predictor_68_face_landmarks.dat")
  rects=detector(images_to_rgp,1)
  for j in rects:
    x=j.tl_corner().x
    y=j.tl_corner().y
    x2=j.br_corner().x
    y2=j.br_corner().y
    counter_of_faces+=1
  # print(x,y,x2,y2)
    cv2.rectangle(images_to_rgp,(x,y),(x2,y2),(0,255,0),thickness=4)
  plt.subplot(1,number_of_image,i+1)
  plt.imshow(images_to_rgp)
print("number of faces is:",counter_of_faces)

for i in range(len(urls)):
  images=cv2.imread(f"image{i+1}.jpg")
  images_to_rgp=cv2.cvtColor(images,cv2.COLOR_BGR2RGB)
  rects=detector(images_to_rgp,1)
  shappe=predictor(images_to_rgp,rects[0])
  shappe_np=np.zeros((68,2),dtype="int")
  for m in range(0,68):
    shappe_np[m]=(shappe.part(m).x,shappe.part(m).y)
  for k,(x,y) in enumerate(shappe_np):
    cv2.circle(images_to_rgp,(x,y),3,(0,0,255),-1)
  plt.subplot(1,number_of_image,i+1)
  plt.imshow(images_to_rgp)

img=cv2.imread("stock-photo.jpg")
img2=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
plt.imshow(img2)

left = 180
top = 50
right = 430
bottom = 400
image_after_crop=img2[top:bottom, left:right]
plt.imshow(image_after_crop)
cv2.imwrite("image_after_crop.jpg", cv2.cvtColor(image_after_crop, cv2.COLOR_RGB2BGR))
plt.show()

counter_of_faces=0
detector=dlib.get_frontal_face_detector()
predictor=dlib.shape_predictor("shape_predictor_68_face_landmarks.dat")
rects=detector(image_after_crop,1)
# print(rects)
for i in rects:
  x=i.tl_corner().x
  y=i.tl_corner().y
  x2=i.br_corner().x
  y2=i.br_corner().y
  counter_of_faces+=1
  # print(x,y,x2,y2)
  cv2.rectangle(image_after_crop,(x,y),(x2,y2),(0,255,0),thickness=2)
print("number of facees in the image is:",counter_of_faces)
plt.imshow(image_after_crop)

for i in range(1):
  shappe=predictor(image_after_crop,rects[i])
  shappe_np=np.zeros((68,2),dtype="int")
  for i in range(0,68):
    shappe_np[i]=(shappe.part(i).x,shappe.part(i).y)
  for i,(x,y) in enumerate(shappe_np):
    cv2.circle(image_after_crop,(x,y),3,(0,0,255),-1)
cv2.imwrite("image_with_landmarks.jpg", cv2.cvtColor(image_after_crop, cv2.COLOR_RGB2BGR))
plt.imshow(image_after_crop)

left = 70
top = 160
right = 190
bottom = 195
image_after_crop_eyes=image_after_crop[top:bottom, left:right]
plt.imshow(image_after_crop_eyes)
cv2.imwrite("image_after_crop_eyes.jpg", cv2.cvtColor(image_after_crop_eyes, cv2.COLOR_RGB2BGR))
plt.show()